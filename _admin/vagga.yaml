containers:
  admin_service:
    setup:
    - !Ubuntu trusty
    - !UbuntuUniverse
    - !Install [libpq-dev, ca-certificates, git, ssh]
    - !Py3Requirements requirements.txt
    environ:
      PG_PORT: 5433
      DATABASE_URL: postgres://vaggauser:password@127.0.0.1:5433/vaggadb

  postgres:
    setup:
    - !Ubuntu trusty
    - !Install [postgresql]
    - !Sh |
       mkdir -p /data
    environ:
      PG_PORT: 5433
      PG_DB: vaggadb
      PG_USER: vaggauser
      PG_PASSWORD: password
      PGDATA: /data
      PG_BIN: /usr/lib/postgresql/9.3/bin
    volumes:
      /data: !Tmpfs
        size: 100M
        mode: 0o700

  redis:
    setup:
    - !Alpine v3.2
    - !Install [redis]

  nginx:
    setup:
      - !Ubuntu trusty
      - !UbuntuUniverse
      - !Install [nginx, git]
      - !NpmInstall [bower]
      - !Depends runtime/nginx.conf
      - !Sh |
          rm /etc/nginx/sites-enabled/default
          cp runtime/nginx.local.conf /etc/nginx/conf.d/site.conf
    environ:
      HOME: /tmp
    volumes:
      /var: !Tmpfs
       mode: 0o766
       subdirs:
        lib:
        lib/nginx:
        log: # default mode is 0o766
        log/nginx: { mode: 0o1777 }

commands:
  run: !Supervise
    description: Run app
    children:
      service: !Command
        container: admin_service
        run: |
            if ! netstat -npl | grep $PG_PORT
            then
              touch /work/.tmp.dbcreation.lock
              while [ -f /work/.tmp.dbcreation.lock ]; do sleep 0.2; done
              python3 manage.py db upgrade
              python3 manage.py auth create_admin --password 1111
            fi
            python3 manage.py runserver -h 0.0.0.0 -p 5001 -d -r

      celery: !Command
        container: admin_service
        run: |
            python3 celery_run.py worker

      db: !Command
        container: postgres
        run: |
            chown postgres:postgres $PGDATA;
            su postgres -c "$PG_BIN/pg_ctl initdb";
            su postgres -c "echo 'host all all all trust' >> $PGDATA/pg_hba.conf"
            su postgres -c "$PG_BIN/postgres -F --port=$PG_PORT -h 127.0.0.1 -k /tmp" &
            sleep 1
            su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"UPDATE pg_database SET datistemplate = FALSE WHERE datname = 'template1';\""
            su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"DROP DATABASE template1;\""
            su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE DATABASE template1 WITH TEMPLATE = template0 ENCODING = 'UNICODE';\""
            su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"UPDATE pg_database SET datistemplate = TRUE WHERE datname = 'template1';\""
            su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE USER $PG_USER WITH PASSWORD '$PG_PASSWORD';\""
            su postgres -c "$PG_BIN/createdb -h 127.0.0.1 -p $PG_PORT $PG_DB -O $PG_USER";
            rm -f /work/.tmp.dbcreation.lock
            wait

      redis: !Command
        container: redis
        run: "redis-server --daemonize no --bind 127.0.0.1"

  nginx: !Command
    container: nginx
    run: |
        (cd static && bower install --allow-root --config.interactive=false)
        nginx -g "daemon off;" -c /work/runtime/nginx.local.conf
